import{Q as l,j as c}from"./stories.settings-7040e2b8.js";import{T as a}from"./Tag-41179497.js";import"./index-61bf1805.js";import"./_commonjsHelpers-de833af9.js";import"./dom.utils-26b7419a.js";import"./Icon-1bb796da.js";import"./settings-577c54c5.js";import"./log.utils-973a80c9.js";const{useArgs:m}=__STORYBOOK_MODULE_CLIENT_API__;a.displayName="Tag";const v={title:"React/Molecules/Tag",component:a,parameters:{docs:{description:{component:"Tags are components that help filter content to the desired relevance."}}},args:{label:"I am a Tag!",isToggle:!1,active:!1,iconLeft:"hammer-wench",removable:!1,name:"aui-tag",ariaLabelDelete:"Delete"},argTypes:{label:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:""}},description:"The `label` describes the `Tag` component."},isToggle:{control:{type:"boolean"},table:{type:{summary:"boolean"},defaultValue:{summary:!1}},description:"The `isToggle` prop turns the Tag component into a toggle tag. A toggle tag always remains visible but can be toggled on or off. Toggle tags can never include a trailing icon, as they cannot be removed."},active:{control:{type:"boolean"},if:{arg:"isToggle",truthy:!0},table:{type:{summary:"boolean"},defaultValue:{summary:!1}},description:"This prop sets a toggle `Tag` component as `active`. This prop makes the `Tag` a controlled component and should be used together with `onClick`."},iconLeft:{control:{type:"select"},options:["","tags","tags-double","hammer-wench","headphones-customer-support-human","professional-tool-dropbox"],table:{type:{summary:"string"},defaultValue:{summary:""}},description:"A Tag component can include a leading icon."},removable:{control:{type:"boolean"},if:{arg:"isToggle",truthy:!1},table:{type:{summary:"boolean"},defaultValue:{summary:!1}},description:"A Tag component can include a trailing icon. The use of the trailing icon is reserved for an interactive icon action to remove the tag itself."},onClick:{control:{type:"function"},table:{type:{summary:"function"}},action:"onClick",description:"Function triggered when the tag is clicked. First parameter of this function is of type `(React).MouseEvent`. Only available on tags with `isToggle` or `removable` enabled."},name:{control:{type:"text"},table:{type:{summary:"string"}},description:"The `name` prop is set on the button if the `isToggle` prop is true. It is also used for the name on the remove button (postfixed with `-delete`)."},ariaLabelDelete:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:"Verwijderen"}},description:"The `aria-label` for the delete icon button on removable tags."},qa:l}},g=e=>{const[,s]=m();return c(a,{...e,onClick:i=>{e.onClick(i),s({...e,active:e.isToggle?!e.active:e.active})}})},t=g.bind({});var o,n,r;t.parameters={...t.parameters,docs:{...(o=t.parameters)==null?void 0:o.docs,source:{originalSource:`args => {
  const [, updateArgs] = useArgs();
  return <Tag {...args} onClick={name => {
    args.onClick(name);
    updateArgs({
      ...args,
      active: args.isToggle ? !args.active : args.active
    });
  }} />;
}`,...(r=(n=t.parameters)==null?void 0:n.docs)==null?void 0:r.source}}};const _=["tag"];export{_ as __namedExportsOrder,v as default,t as tag};
//# sourceMappingURL=Tag.stories-ef0a1735.js.map
