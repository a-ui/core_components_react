import{j as p,Q as X}from"./stories.settings-7040e2b8.js";import{r as l,R as Z}from"./index-61bf1805.js";import{a as ee}from"./TextField-f4f1e393.js";import"./TextArea-57d920be.js";import"./DefinitionList-40407e1d.js";import{F}from"./FunctionalList-243252a1.js";import{L}from"./ListItem-e17ffebe.js";import"./Icon-1bb796da.js";import"./Avatar-4b22a723.js";import"./Checkbox-aa779e72.js";import{F as te}from"./Flyout-4a06c40d.js";import"./_commonjsHelpers-de833af9.js";import"./dom.utils-26b7419a.js";import"./layout.settings-4161ae17.js";import"./input.renders-9183a2a4.js";import"./Spinner-290b7358.js";import"./settings-577c54c5.js";import"./log.utils-973a80c9.js";import"./index-2801d3c9.js";function g({id:A,label:O,items:n,name:d,multiple:a,required:j,inputValue:f,value:o,onInputChange:k,onChange:m,noResultsText:P,qa:H,description:N,state:W,addOn:T}){const[M,h]=l.useState(!1),[i,B]=l.useState(n),[G,K]=l.useState(f||""),[Q,w]=l.useState(!a&&o||""),[s,x]=l.useState(-1),[y,V]=l.useState(a&&o||[]),c=f||f===""?f:G,v=o||o===""?o:Q,S=Z.useRef(null);l.useEffect(()=>{o&&!a&&I(o,!0),o&&a&&V(o)},[o]),l.useEffect(()=>{B((n||[]).filter(e=>{var t;return c?(t=e.label)==null?void 0:t.toLowerCase().includes(c.toLowerCase()):!0}))},[c,n]),l.useEffect(()=>{if(S.current){const t=S.current.querySelector(`.a-list__item:nth-child(${s+1})`);t==null||t.scrollIntoView({block:"nearest",inline:"nearest"})}},[s]);const $=e=>{h(e)},R=()=>{h(!1),x(-1)},C=e=>{K(e),h(!0),v&&!e&&(w(""),!a&&m&&m("",d)),k&&k(e,d)},I=(e,t=!1)=>{if(!a&&o!==""&&(!o||o===e)){const r=n==null?void 0:n.find(u=>u.value===e);C((r==null?void 0:r.label)||""),w((r==null?void 0:r.value)||""),R()}!t&&m&&m(e,d)},E=e=>{const t=n==null?void 0:n.find(u=>u.value===e);t&&w(t.value);const r=y.includes(e)?y.filter(u=>u!==e):[...y,e].filter(u=>u!=="");V(r),m&&m(r,d)},U=()=>{const e=n==null?void 0:n.find(t=>t.value===v);e&&(c!=null&&c.length)&&e.label!==c&&C(e.label),R()},Y=()=>{const e=i&&i[s];e&&(a?E(e.value):I(e.value))},z=e=>{const t=(i==null?void 0:i.length)||0;switch(e.key){case"ArrowDown":return e.preventDefault(),x(s===-1?0:(s+1)%t),h(!0);case"ArrowUp":return e.preventDefault(),x(s===-1||s-1<0?t-1:s-1),h(!0);case"Enter":return Y();case"Escape":return R()}},J=e=>a?y.includes(e):e===v;return p(te,{scrollable:!0,hasPadding:!1,qa:H,className:"m-autocomplete",trigger:p(ee,{id:A,name:d,label:O,onBlur:U,value:c,onChange:e=>C(e.target.value),role:"combobox",autoComplete:"off","aria-autocomplete":"list","aria-haspopup":"true","aria-expanded":M,onKeyDown:z,description:N,required:j,state:W,addOn:T?{...T,content:T.content}:void 0}),ref:S,open:M,onStateChange:$,children:i&&i.length?p(F,{lined:!0,onItemClick:e=>{a?E(e):I(e)},children:i.map((e,t)=>p(L,{id:e.value,tabIndex:-1,highlighted:t===s,onMouseDown:r=>r.preventDefault(),active:J(e.value),name:e.value,link:{href:""},children:e.label},e.value))}):p(F,{lined:!0,children:p(L,{id:"aui-autocomplete-no-results",children:p("small",{children:P})})})})}g.defaultProps={id:"aui-autocomplete",noResultsText:"Geen resultaten"};g.displayName="Autocomplete";const xe={title:"React/Molecules/Autocomplete",component:g,parameters:{docs:{description:{component:"The `Autocomplete` component is a normal text input enhanced by a pannel of filtered suggestions."}}},args:{name:"aui-autocomplete",items:[{label:"Acadia",value:"1"},{label:"American Samoa",value:"2"},{label:"Arches",value:"3"},{label:"Canyonlands",value:"4"},{label:"Capitol Reef",value:"5"}],label:"National Parks",noResultsText:"Sorry, niet gevonden",multiple:!1,required:!1,addOn:{type:"icon",placement:"left",content:"a11y"}},argTypes:{name:{control:{type:"text"},table:{type:{summary:"string"}},description:"The `name` prop; is set on the `input` HTML element of the `Autocomplete` component. It is also returned by `onChange` and `onInputChange` to identify the component."},items:{control:{type:"array"},table:{type:{summary:"array"},defaultValue:{summary:"[]"}},description:'The `items` prop control the results from the dropdown in the `Autocomplete` component. These `items` are objects in the format of `{ label: "", value: "" }`.'},label:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:""}},description:"The label of the `Autocomplete` component."},noResultsText:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:"Geen resultaten"}},description:"The text when no item match the provided search term."},multiple:{control:{type:"boolean"},table:{type:{summary:"boolean"},defaultValue:{summary:!1}},description:"The `multiple` (if set to `true`) prop will allow the user to select multiple values. The representation of those values is free to chose (e.g. use `Tag` components)"},required:{control:{type:"boolean"},table:{type:{summary:"boolean"},defaultValue:{summary:!1}},description:"The `required` prop adds a red asterisk to the `Autocomplete` label and adds the required attribute to the HTML input field."},inputValue:{table:{type:{summary:"string"}},description:"The `inputValue` prop controls the value of the `Autocomplete` input field. This prop makes the `Autocomplete` a controlled component and should be used together with `onInputChange`."},value:{table:{type:{summary:"string | string[]"}},description:"The `value` prop controls the value of the selected `Autocomplete` item. This prop makes the `Autocomplete` a controlled component and should be used together with `onChange`. When `multiple` is `true` the value should be an array of strings."},id:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:"aui-autocomplete"}},description:"The `id` prop; set on the `input` HTML element of the `Autocomplete` component."},description:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:""}},description:"The `description` prop adds a description or hint text between the label and the inputfield of the `Autocomplete`component"},state:{control:{type:"select"},options:["","error","success"],table:{type:{summary:"select"}},description:"When the `Autocomplete` is associated with a success or error state, the border of the inputfield as well as the description above will match to that thematic colour together with an identifiable icon."},addOn:{control:{type:"object"},table:{type:{summary:"object"}},description:"Set this prop to add a leading or trailing add-on (icon or spinner) inside the input field of the `Autocomplete` component. Addons have the following properties: `type`, `content` and `placement`, where `type` is either `icon`, `text` or `spinner`, `content` is either an icon name or a textual pre- or suffix and `placement` is either `left` or `right`."},onChange:{control:{type:"function"},table:{type:{summary:" function"}},action:"onChange",description:"Function triggered when selecting an option from the `Autocomplete` dropdown. The first parameter of this function is the selected value, the second parameter is the `name` of the `Autocomplete` component. When the `multiple` prop is set to `true`, the value is an array."},onInputChange:{control:{type:"function"},table:{type:{summary:" function"}},action:"onInputChange",description:"Function triggered when the input field value changes. The first parameter of this function is the input, the second parameter is the given component name."},qa:X}},oe=A=>p(g,{...A}),b=oe.bind({});var D,_,q;b.parameters={...b.parameters,docs:{...(D=b.parameters)==null?void 0:D.docs,source:{originalSource:"args => <Autocomplete {...args} />",...(q=(_=b.parameters)==null?void 0:_.docs)==null?void 0:q.source}}};const ve=["autocomplete"];export{ve as __namedExportsOrder,b as autocomplete,xe as default};
//# sourceMappingURL=Autocomplete.stories-e084ac2f.js.map
