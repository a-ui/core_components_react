import{a as M,j as s,Q as O}from"./stories.settings-7040e2b8.js";import{c as f}from"./dom.utils-26b7419a.js";import{a as B,D as N,c as U}from"./layout.settings-4161ae17.js";import{r as W}from"./index-61bf1805.js";import{r as j,a as H,b as P}from"./input.renders-0071cf08.js";import"./_commonjsHelpers-de833af9.js";import"./Icon-a1e4ec3d.js";import"./settings-ca81cf29.js";import"./log.utils-973a80c9.js";function i({charCounter:r,charCountText:c,description:l,disabled:T,id:e="aui-text-area",inline:o,label:w,maxLength:t,maxLengthBlocksInput:A,name:C,onChange:p,qa:v,readOnly:k,required:u,size:h,state:d,value:a,onBlur:E,onClick:R,onFocus:_,onKeyDown:F,onKeyUp:L}){const[I,S]=W.useState(a?a.length:0),m=r!==void 0?r:!!t,V=c||(t?"%count% / %max%":"%count%"),q=f({"a-input":!0,"a-input--inline":!!o,[`a-input--${B[h||N]}`]:!!h,"has-error":d===U.ERROR}),D=f({"a-input__wrapper":!0,"a-input__wrapper--inline":!!o}),K=y=>(S(y.target.value.length),p&&p(y));return M("div",{className:q,"data-qa":v,children:[j({label:w,id:e,required:u,inline:o}),H({id:e,description:l,state:d}),s("div",{className:D,children:s("textarea",{value:a,name:C,id:e,disabled:T,readOnly:k,required:u,...m?{"aria-describedby":`${e}--counter`}:{},...l?{"aria-describedby":`${e}--description`}:{},maxLength:t&&A?t:void 0,onChange:K,onBlur:E,onClick:R,onFocus:_,onKeyDown:F,onKeyUp:L})}),P({id:e,charCountText:V,charCounter:m,characterCount:a?a.length:I,maxLength:t})]})}i.displayName="TextArea";const ae={title:"React/Atoms/Input/TextArea",component:i,parameters:{docs:{description:{component:"Use an input field when the user needs to enter a string. Specifically when there is no clear selection of options, but a wide variety of possible answers. Two of the most common types of input fields are the single line text ‘input’, the multiline ‘textarea’."}}},args:{label:"Enter your name",description:"Description",disabled:!1,readOnly:!1,inline:!1,required:!1,charCountText:"%count% / %max%",maxLengthBlocksInput:!1,id:"textfield-story"},argTypes:{label:{control:{type:"text"},table:{defaultValue:{summary:""},type:{summary:"string"}},description:"A `TextArea` features at least a name label atop or to the left side of a container that itself contains an input. "},description:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:""}},description:"The `description` prop adds a description or hint text between the label and the `TextArea`."},value:{control:{type:"text"},table:{defaultValue:{summary:""},type:{summary:"string"}},description:"The value prop of the `TextArea`. Setting it makes the component controlled; use it in combination with `onChange`."},disabled:{control:{type:"boolean"},table:{type:{summary:"boolean"},defaultValue:{summary:!1}},description:"When an input field is disabled, the container takes on a light grey fill, while the enclosed form inputs and add-ons are also rendered in lighter, muted greys without any interaction."},readOnly:{control:{type:"boolean"},table:{type:{summary:"boolean"},defaultValue:{summary:!1}},description:"Makes the `TextArea` read-only."},inline:{control:{type:"boolean"},table:{type:{summary:"boolean"},defaultValue:{summary:!1}},description:"With the `inline` prop the `TextArea` will not use the full width of the parent container."},required:{control:{type:"boolean"},table:{type:{summary:"boolean"},defaultValue:{summary:!1}},description:"The `required` prop adds a red asterisk to the `TextArea` label and adds the required attribute to the HTML textarea field."},charCounter:{control:{type:"boolean"},table:{type:{summary:"boolean"}},description:"If `true`, the `charCounter` prop adds a character counter under the `TextArea`."},maxLength:{control:{type:"number"},table:{type:{summary:"integer"}},description:"The `maxLength` attribute sets a character limitation for the value of the `TextArea`. If the `charCounter` prop is not explicitly set to `false`, this will also add a character counter text under the `TextArea`."},maxLengthBlocksInput:{control:{type:"boolean"},table:{type:{sunnary:"boolean"}},description:"When the `maxLength` prop is set, the `maxLengthBlocksInput` prop blocks the user from typing more characters than the `maxLength` prop's value."},charCountText:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:"%count% / %max%"}},description:"The text for the charCounter can be changed by providing a string which replaces placeholder text with their corresponding values. `%count%` equals the amount of characters typed in the textarea, `%max%` equals the `maxLength prop` and `%left%` is the difference between `maxLength` and the amount of characters typed."},state:{control:{type:"select"},options:["","error","success"],table:{type:{summary:"select"}},description:"Whenever an input field is associated with a success or error state, the border of the container will match to that thematic colour as well as display the message above the container together with an identifiable icon."},size:{control:{type:"select"},options:["small","medium","large"],table:{type:{summary:"select"}},description:"The `size` prop allows different size variants (in height) of the `TextArea`."},onChange:{control:{type:"function"},table:{type:{summary:"function"}},action:"onChange",description:"Function triggered when the `TextArea` value has changed. The first parameter of this function is of type `(React).ChangeEvent`."},onClick:{control:{type:"function"},table:{type:{summary:"function"}},action:"onClick",description:"Function triggered when the `TextArea` is clicked. The first parameter of this function is of type `(React).MouseEvent`."},onBlur:{control:{type:"function"},table:{type:{summary:"function"}},action:"onBlur",description:"Function triggered when the `TextArea` is blurred. The first parameter of this function is of type `(React).FocusEvent`."},onFocus:{control:{type:"function"},table:{type:{summary:"function"}},action:"onFocus",description:"Function triggered when the `TextArea` is focused. The first parameter of this function is of type `(React).FocusEvent`."},onKeyDown:{control:{type:"function"},table:{type:{summary:"function"}},action:"onKeyDown",description:"Function triggered when the user presses a key inside the `TextArea`. The first parameter of this function is of type `(React).KeyboardEvent`."},onKeyUp:{control:{type:"function"},table:{type:{summary:"function"}},action:"onKeyUp",description:"Function triggered when the user releases a key inside the `TextArea`. The first parameter of this function is of type `(React).KeyboardEvent`."},qa:O,id:{control:{type:"text"},table:{type:{summary:"string"}},description:"The `id` prop; set on the `textarea` HTML element."},name:{control:{type:"text"},table:{type:{summary:"string"}},description:"The `name` prop; set on the `textarea` HTML element."}}},$=r=>s(i,{...r}),n=$.bind({});var b,x,g;n.parameters={...n.parameters,docs:{...(b=n.parameters)==null?void 0:b.docs,source:{originalSource:"args => <TextArea {...args} />",...(g=(x=n.parameters)==null?void 0:x.docs)==null?void 0:g.source}}};const re=["textArea"];export{re as __namedExportsOrder,ae as default,n as textArea};
//# sourceMappingURL=TextArea.stories-7f74f373.js.map
