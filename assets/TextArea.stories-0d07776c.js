import{a as D,j as i,Q as K}from"./stories.settings-7040e2b8.js";import{c as m}from"./dom.utils-26b7419a.js";import{a as M,D as O,c as N}from"./layout.settings-4161ae17.js";import{r as U}from"./index-61bf1805.js";import{r as W,a as j,b as H}from"./input.renders-bce51f91.js";import"./_commonjsHelpers-de833af9.js";import"./Icon-a1e4ec3d.js";import"./settings-ca81cf29.js";import"./log.utils-973a80c9.js";function s({charCounter:a,charCountText:x="%count% / %max%",description:c,disabled:g,id:e="aui-text-area",inline:n,label:T,maxLength:o,name:w,onChange:l,qa:A,readOnly:C,required:p,size:u,state:h,value:t,onBlur:v,onClick:E,onFocus:R,onKeyDown:_,onKeyUp:F}){const[k,V]=U.useState(t?t.length:0),L=m({"a-input":!0,"a-input--inline":!!n,[`a-input--${M[u||O]}`]:!!u,"has-error":h===N.ERROR}),S=m({"a-input__wrapper":!0,"a-input__wrapper--inline":!!n}),q=d=>(V(d.target.value.length),l&&l(d));return D("div",{className:L,"data-qa":A,children:[W({label:T,id:e,required:p,inline:n}),j({id:e,description:c,state:h}),i("div",{className:S,children:i("textarea",{value:t,name:w,id:e,disabled:g,readOnly:C,required:p,...a&&o?{"aria-describedby":`${e}--counter`}:{},...c?{"aria-describedby":`${e}--description`}:{},maxLength:o,onChange:q,onBlur:v,onClick:E,onFocus:R,onKeyDown:_,onKeyUp:F})}),H({id:e,charCountText:x,charCounter:a,characterCount:t?t.length:k,maxLength:o})]})}s.displayName="TextArea";const X={title:"React/Atoms/Input/TextArea",component:s,parameters:{docs:{description:{component:"Use an input field when the user needs to enter a string. Specifically when there is no clear selection of options, but a wide variety of possible answers. Two of the most common types of input fields are the single line text ‘input’, the multiline ‘textarea’."}}},args:{label:"Enter your name",description:"Description",disabled:!1,readOnly:!1,inline:!1,required:!1,charCounter:!1,charCountText:"%count% / %max%",id:"textfield-story"},argTypes:{label:{control:{type:"text"},table:{defaultValue:{summary:""},type:{summary:"string"}},description:"A `TextArea` features at least a name label atop or to the left side of a container that itself contains an input. "},description:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:""}},description:"The `description` prop adds a description or hint text between the label and the `TextArea`."},value:{control:{type:"text"},table:{defaultValue:{summary:""},type:{summary:"string"}},description:"The value prop of the `TextArea`. Setting it makes the component controlled; use it in combination with `onChange`."},disabled:{control:{type:"boolean"},table:{type:{summary:"boolean"},defaultValue:{summary:!1}},description:"When an input field is disabled, the container takes on a light grey fill, while the enclosed form inputs and add-ons are also rendered in lighter, muted greys without any interaction."},readOnly:{control:{type:"boolean"},table:{type:{summary:"boolean"},defaultValue:{summary:!1}},description:"Makes the `TextArea` read-only."},inline:{control:{type:"boolean"},table:{type:{summary:"boolean"},defaultValue:{summary:!1}},description:"With the `inline` prop the `TextArea` will not use the full width of the parent container."},required:{control:{type:"boolean"},table:{type:{summary:"boolean"},defaultValue:{summary:!1}},description:"The `required` prop adds a red asterisk to the `TextArea` label and adds the required attribute to the HTML textarea field."},charCounter:{control:{type:"boolean"},table:{type:{summary:"boolean"},defaultValue:{summary:!1}},description:"When the `maxLength` prop is set, the `charCounter` prop adds a character counter under the `TextArea`."},maxLength:{control:{type:"number"},table:{type:{summary:"integer"}},description:"The `maxLength` attribute sets a character limitation for the value of the `TextArea`."},charCountText:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:"%count% / %max%"}},description:"The text for the charCounter can be changed by providing a string which replaces placeholder text with their corresponding values. `%count%` equals the amount of characters typed in the textarea, `%max%` equals the `maxLength prop` and `%left%` is the difference between `maxLength` and the amount of characters typed."},state:{control:{type:"select"},options:["","error","success"],table:{type:{summary:"select"}},description:"Whenever an input field is associated with a success or error state, the border of the container will match to that thematic colour as well as display the message above the container together with an identifiable icon."},size:{control:{type:"select"},options:["small","medium","large"],table:{type:{summary:"select"}},description:"The `size` prop allows different size variants (in height) of the `TextArea`."},onChange:{control:{type:"function"},table:{type:{summary:"function"}},action:"onChange",description:"Function triggered when the `TextArea` value has changed. The first parameter of this function is of type `(React).ChangeEvent`."},onClick:{control:{type:"function"},table:{type:{summary:"function"}},action:"onClick",description:"Function triggered when the `TextArea` is clicked. The first parameter of this function is of type `(React).MouseEvent`."},onBlur:{control:{type:"function"},table:{type:{summary:"function"}},action:"onBlur",description:"Function triggered when the `TextArea` is blurred. The first parameter of this function is of type `(React).FocusEvent`."},onFocus:{control:{type:"function"},table:{type:{summary:"function"}},action:"onFocus",description:"Function triggered when the `TextArea` is focused. The first parameter of this function is of type `(React).FocusEvent`."},onKeyDown:{control:{type:"function"},table:{type:{summary:"function"}},action:"onKeyDown",description:"Function triggered when the user presses a key inside the `TextArea`. The first parameter of this function is of type `(React).KeyboardEvent`."},onKeyUp:{control:{type:"function"},table:{type:{summary:"function"}},action:"onKeyUp",description:"Function triggered when the user releases a key inside the `TextArea`. The first parameter of this function is of type `(React).KeyboardEvent`."},qa:K,id:{control:{type:"text"},table:{type:{summary:"string"}},description:"The `id` prop; set on the `textarea` HTML element."},name:{control:{type:"text"},table:{type:{summary:"string"}},description:"The `name` prop; set on the `textarea` HTML element."}}},I=a=>i(s,{...a}),r=I.bind({});var y,f,b;r.parameters={...r.parameters,docs:{...(y=r.parameters)==null?void 0:y.docs,source:{originalSource:"args => <TextArea {...args} />",...(b=(f=r.parameters)==null?void 0:f.docs)==null?void 0:b.source}}};const ee=["textArea"];export{ee as __namedExportsOrder,X as default,r as textArea};
//# sourceMappingURL=TextArea.stories-0d07776c.js.map
