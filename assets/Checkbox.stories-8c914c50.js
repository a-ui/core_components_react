import{Q as i,j as l}from"./stories.settings-7040e2b8.js";import{C as o}from"./Checkbox-2e603441.js";import"./index-61bf1805.js";import"./_commonjsHelpers-de833af9.js";import"./settings-efbb2779.js";import"./dom.utils-26b7419a.js";const{useArgs:h}=__STORYBOOK_MODULE_CLIENT_API__;o.displayName="Checkbox";const x={title:"React/Atoms/Checkbox",component:o,parameters:{docs:{description:{component:"A checkbox allows for a user to select one or more explicit options from a list. They are ideal for allowing the selection of multiple options (for example for batch operations) or simply to provide a clear opt-in or opt-out decision. When there is a list of two or more options that are mutually exclusive and the user must select exactly one choice, then use radio buttons instead of checkboxes. Never combine a checkbox with a label containing other elements apart from text. For instance do not use text links in the label of a checkbox."}}},args:{label:"I agree",showLabel:!0,checked:!1,disabled:!1,indeterminate:!1,id:"checkbox-example",name:"agree-checkbox"},argTypes:{label:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:""}},description:"The `Checkbox` component has a `label` prop that is shown next to the checkbox."},showLabel:{control:{type:"boolean"},table:{type:{summary:"boolean"},defaultValue:{summary:!0}},description:"Set to false to hide the label (by adding `u-screen-reader-only` class to it)."},checked:{control:{type:"boolean",disable:!0},table:{type:{summary:"boolean"},defaultValue:{summary:!1}},description:"Checked state. When this prop is set, the `Checkbox` becomes a controlled component; use it together with `onChange`."},disabled:{control:{type:"boolean"},table:{type:{summary:"boolean"},defaultValue:{summary:!1}},description:"This will ensure that the checkbox cannot be interacted with; it's state cannot be changed by the user."},indeterminate:{control:{type:"boolean"},table:{type:{summary:"boolean"},defaultValue:{summary:!1}},description:"Whenever a `Checkbox` is used to reflect a(n) '(un)select all'-type of behaviour for a group of components or other checkboxes, a third indeterminate-state is added."},onChange:{control:{type:"function"},table:{type:{summary:"function"}},action:"onChange",description:"Function triggered when the checkbox value has changed. First parameter of this function is of type `(React).ChangeEvent`."},id:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:""}},description:"The `id` prop is required for the `Checkbox` component. It is used to link the label with the input tag."},name:{control:{type:"text"},table:{type:{summary:"string"},defaultValue:{summary:""}},description:"The `Checkbox` component's `name` prop. The `name` prop in a checkbox is used to reference form data after it's submitted, and to reference the data on the client side."},qa:i}},m=t=>{const[,c]=h();return l(o,{...t,onChange:a=>{t.onChange(a),c({...t,indeterminate:!1,checked:a.target.checked})}})},e=m.bind({});var n,r,s;e.parameters={...e.parameters,docs:{...(n=e.parameters)==null?void 0:n.docs,source:{originalSource:`args => {
  const [, updateArgs] = useArgs();
  return <Checkbox {...args} onChange={e => {
    args.onChange(e);
    updateArgs({
      ...args,
      indeterminate: false,
      checked: e.target.checked
    });
  }} />;
}`,...(s=(r=e.parameters)==null?void 0:r.docs)==null?void 0:s.source}}};const g=["checkbox"];export{g as __namedExportsOrder,e as checkbox,x as default};
//# sourceMappingURL=Checkbox.stories-8c914c50.js.map
